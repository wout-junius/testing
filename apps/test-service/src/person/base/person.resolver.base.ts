/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePersonArgs } from "./CreatePersonArgs";
import { UpdatePersonArgs } from "./UpdatePersonArgs";
import { DeletePersonArgs } from "./DeletePersonArgs";
import { PersonCountArgs } from "./PersonCountArgs";
import { PersonFindManyArgs } from "./PersonFindManyArgs";
import { PersonFindUniqueArgs } from "./PersonFindUniqueArgs";
import { Person } from "./Person";
import { Subject } from "../../subject/base/Subject";
import { PersonService } from "../person.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Person)
export class PersonResolverBase {
  constructor(
    protected readonly service: PersonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async _peopleMeta(
    @graphql.Args() args: PersonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Person])
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async people(@graphql.Args() args: PersonFindManyArgs): Promise<Person[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Person, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "own",
  })
  async person(
    @graphql.Args() args: PersonFindUniqueArgs
  ): Promise<Person | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Person)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "create",
    possession: "any",
  })
  async createPerson(@graphql.Args() args: CreatePersonArgs): Promise<Person> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        subject: args.data.subject
          ? {
              connect: args.data.subject,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Person)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updatePerson(
    @graphql.Args() args: UpdatePersonArgs
  ): Promise<Person | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          subject: args.data.subject
            ? {
                connect: args.data.subject,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Person)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "delete",
    possession: "any",
  })
  async deletePerson(
    @graphql.Args() args: DeletePersonArgs
  ): Promise<Person | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Subject, {
    nullable: true,
    name: "subject",
  })
  @nestAccessControl.UseRoles({
    resource: "Subject",
    action: "read",
    possession: "any",
  })
  async resolveFieldSubject(
    @graphql.Parent() parent: Person
  ): Promise<Subject | null> {
    const result = await this.service.getSubject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
